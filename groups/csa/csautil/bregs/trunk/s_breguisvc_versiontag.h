// s_breguisvc_versiontag.h   -*-C++-*-
#ifndef INCLUDED_S_BREGUISVC_VERSIONTAG
#define INCLUDED_S_BREGUISVC_VERSIONTAG

#ifndef INCLUDED_BDES_IDENT
#include <bdes_ident.h>
#endif
BDES_IDENT_RCSID(s_breguisvc_versiontag_h,"$Id$ $CSID$ $CCId$")
BDES_IDENT_PRAGMA_ONCE

//@PURPOSE: Provide versioning information for the 's_breguisvc' package group.
//
//@SEE_ALSO: s_breguisvc_version
//
//@AUTHOR: Marcos Lara Reinhold (mlarareinhol@bloomberg.net)
//
//@DESCRIPTION: This component provides versioning information for the
// 's_breguisvc' package group.  The 'S_BREGUISVC_VERSION' macro that is
// supplied can be used for conditional-compilation based on s_breguisvc
// version information.  The following usage example illustrates this basic
// capability.
//
///Usage
///-----
// At compile time, the version of s_breguisvc can be used to select an older
// or newer way to accomplish a task, to enable new functionality, or to
// accommodate an interface change.  For example, if the name of a function
// changes (a rare occurrence, but potentially disruptive when it does happen),
// the impact on affected code can be minimized by conditionally calling the
// function by its old or new name using conditional compilation.  In the
// following, the '#if' preprocessor directive compares 'S_BREGUISVC_VERSION'
// (i.e., the latest s_breguisvc version, excluding the patch version) to a
// specified major and minor version composed using the
// 'S_BREGUISVC_MAKE_VERSION' macro:
//..
//  #if S_BREGUISVC_VERSION > BDE_MAKE_VERSION(1, 3)
//      // Call 'newFunction' for s_breguisvc versions later than 1.3.
//      int result = newFunction();
//  #else
//      // Call 'oldFunction' for s_breguisvc version 1.3 or earlier.
//      int result = oldFunction();
//  #endif
//..

#ifndef INCLUDED_BDESCM_VERSIONTAG
#include <bdescm_versiontag.h>
#endif

#define S_BREGUISVC_VERSION_MAJOR 1

#define S_BREGUISVC_VERSION_MINOR 11

#define S_BREGUISVC_VERSION BDE_MAKE_VERSION(S_BREGUISVC_VERSION_MAJOR, \
                                             S_BREGUISVC_VERSION_MINOR)
    // Construct a composite version number in the range [ 0 ..  999900 ] from
    // the specified 'S_BREGUISVC_VERSION_MAJOR' and
    // 'S_BREGUISVC_VERSION_MINOR' numbers corresponding to the major and minor
    // version numbers, respectively, of the current (latest) s_breguisvc
    // release.  Note that the patch version number is intentionally not
    // included.  For example, 'S_BREGUISVC_VERSION' produces 10300 (decimal)
    // for s_breguisvc version 1.3.1.

#endif

// GENERATED BY BLP_BAS_CODEGEN_3.8.4 Wed Apr 22 09:48:00 2015
// ----------------------------------------------------------------------------
// NOTICE:
//      Copyright (C) Bloomberg L.P., 2010
//      All Rights Reserved.
//      Property of Bloomberg L.P. (BLP)
//      This software is made available solely pursuant to the
//      terms of a BLP license agreement which governs its use.
// ------------------------------- END-OF-FILE --------------------------------
